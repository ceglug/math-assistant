import wx
import wx.grid
import string


#---------------------------------------------------------------------------
class myCellEditor(wx.grid.PyGridCellEditor):
    def __init__(self):
        wx.grid.PyGridCellEditor.__init__(self)
        
    def Create(self, parent, id, evtHandler):
        self._tc = wx.TextCtrl(parent, id, "")
     #  self._tc.SetInsertionPoint(0)
        self.SetControl(self._tc)
        if evtHandler:
            self._tc.PushEventHandler(evtHandler)
        self._tc.Bind(wx.EVT_CHAR, self.OnChar)
 
    def SetSize(self, rect):
        self._tc.SetDimensions(rect.x, rect.y, rect.width+2, rect.height+2,wx.SIZE_ALLOW_MINUS_ONE)
       # self._tc.Alignment(wx.CENTER)
        
    """ def Show(self, show, attr):
       \""" Show or hide the edit control.  Use the attr (if not None)
            to set colors or fonts for the control.

            NOTE: There is no need to everride this if you dont need
            to do something out of the ordinary.
        \"""
        super(myCellEditor, self).Show(show, attr) """
        

    """ def PaintBackground(self, rect, attr):
        \""" Draws the part of the cell not occupied by the edit control.  The
            base class version just fills it with background colour from the
            attribute.

            NOTE: There is no need to everride this if you don't need
            to do something out of the ordinary.
        \"""
        # Call base class method.
        super(CCellEditor, self).PaintBackground(rect, attr)"""

  
    def BeginEdit(self, row, col, grid):
        self.startValue = grid.GetTable().GetValue(row, col)
        self._tc.SetValue(self.startValue)
      #  self._tc.SetInsertionPointEnd()
      #  self._tc.SetFocus()
      #  self._tc.SetSelection(0, self._tc.GetLastPosition())
    
    def EndEdit(self, row, col, grid):
        changed = False
        val = self._tc.GetValue()
        if val != self.startValue:
            changed = True
            grid.GetTable().SetValue(row, col, val) # update the table
        self.startValue = ''
        self._tc.SetValue('')
        return changed
    
    def Reset(self):
        self._tc.SetValue(self.startValue)
       # self._tc.SetInsertionPointEnd()
    
    def Clone(self):
        return myCellEditor()
    
    def StartingKey(self, evt):
        self.OnChar(evt)
        if evt.GetSkipped():
            self._tc.EmulateKeyPress(evt)
    
    def OnChar(self, evt):
        key = evt.GetKeyCode()              # Get the key code
        
        if key in range(256):
            char = chr(key)
        
            if char in string.letters:
                char = char.upper()
                self._tc.SetValue(char)

            elif key in range(48,58):
                self._tc.SetValue(char)

        else:
            evt.Skip()
        
        """elif   key == wx.WXK_DOWN:
            self._grid.DisableCellEditControl()     # Commit the edit
            self._grid.MoveCursorDown(False)        # Change the current cell
        elif key == wx.WXK_UP:
            self._grid.DisableCellEditControl()     # Commit the edit
            self._grid.MoveCursorUp(False)          # Change the current cell
        elif key == wx.WXK_LEFT:
            self._grid.DisableCellEditControl()     # Commit the edit
            self._grid.MoveCursorLeft(False)        # Change the current cell
        elif key == wx.WXK_RIGHT:
            self._grid.DisableCellEditControl()     # Commit the edit
            self._grid.MoveCursorRight(False)       # Change the current cell

        """
        
	        
    def Destroy(self):
        """ Final cleanup
        
            NOTE: There is no need to everride this if you don't need
            to do something out of the ordinary.
        """
        super(myCellEditor, self).Destroy()

#---------------------------------------------------------------------------
